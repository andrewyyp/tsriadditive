beta_est <- reglinear$coefficients[-c(1:2)]
beta_est <- beta_est + truevalue * eta_est
Convertmatrix <- diag(p)
for(i in 2:p)
Convertmatrix[i - 1, i] <- -beta_est[i - 1]/beta_est[i]
Convertmatrix_inv <- solve(Convertmatrix)
Convertmatrix %*% beta_est
X_new <- X %*% Convertmatrix_inv
newtsps <- lm(Y ~ D_hat + X_new[, p])
newtsps$coefficients
newtsri <- lm(Y ~ D + X_new[, p] + res)
newtsri$coefficients
#regular IV
#firstfit <- lm(D ~ X_new)
#D_fit <- fitted(firstfit)
#secondfit <- lm(Y ~ D_fit + X_new[, 3])
#secondfit$coefficients
#thirdfit <- lm(Y ~ D + res)
#thirdfit$coefficients
#thirdfit <- lm(Y ~ D_fit + res)
#thirdfit$coefficients
data <- data.frame(cbind(Y, D, X))
colnames(data) <- c("Y", "D", "X_1", "X_2", "X_3")
#K-fold cross validation
K <- 20
candidates <- -20:20
searchtime <- length(candidates)
est_record <- c()
var_record <- c()
for(i in 1:searchtime){
seclength <- ceiling(N/K)
result <- c()
for(j in 1:K){
temp_data <- data[-(((j - 1)*seclength + 1):min(j*seclength, N)), ]
temp_vali <- data[((j - 1)*seclength + 1):min(j*seclength, N), ]
temp_Y <- temp_data[, 1]
temp_D <- temp_data[, 2]
temp_X <- temp_data[, -(1:2)]
temp_reglinear <- lm(temp_Y ~ ., data = data.frame(temp_Y,temp_D, temp_X))
temp_beta_est <- temp_reglinear$coefficients[-c(1:2)]
temp_firstfit <- lm(temp_D ~ ., data = data.frame(temp_D, temp_X))
temp_eta_est <- temp_firstfit$coefficients[-1]
temp_beta_est <- temp_beta_est + temp_eta_est * candidates[i]
#print(temp_beta_est)
temp_Convertmatrix <- diag(p)
for(k in 2:p){
temp_Convertmatrix[k - 1, k] <- -temp_beta_est[k - 1]/temp_beta_est[k]
}
temp_Convertmatrix_inv <- solve(temp_Convertmatrix)
temp_X_new <- as.data.frame(as.matrix(temp_X) %*% temp_Convertmatrix_inv)
temp_firstfit <- lm(temp_D ~ ., data = data.frame(temp_D, temp_X_new))
temp_res <- residuals(temp_firstfit)
#temp_D_fit <- fitted(temp_firstfit)
temp_secondfit <- lm(temp_Y ~., data = data.frame(temp_Y, temp_D, temp_X_new[, p]))
temp_vali_X <- temp_vali[, 3:(p + 2)]
temp_vali_X_new <- as.data.frame(as.matrix(temp_vali_X) %*% temp_Convertmatrix_inv)
temp_vali_res <- temp_vali[, 2] - predict(temp_firstfit, newdata = data.frame(temp_vali[, 2], temp_vali_X_new))
temp_X_new_combined <- cbind(1, as.matrix(temp_vali_X_new[, -p]))
temp_P_X <- temp_X_new_combined %*% solve(t(temp_X_new_combined) %*% temp_X_new_combined) %*% t(temp_X_new_combined)
temp = mean((temp_P_X %*% (temp_vali[, 1] - cbind(1, as.matrix(temp_vali[, 2]), as.matrix(temp_vali_X_new[, p])) %*% temp_secondfit$coefficients))^2)
result <- c(result, temp)
}
est_record <- c(est_record, mean(result))
var_record <- c(var_record, var(result))
}
est_record
var_record
point <- candidates[which.min(est_record)]
candidates <- seq(point - 2, point + 2, by = 0.1)
searchtime <- length(candidates)
record <- c()
est_record <- c()
var_record <- c()
for(i in 1:searchtime){
seclength <- ceiling(N/K)
result <- c()
for(j in 1:K){
temp_data <- data[-(((j - 1)*seclength + 1):min(j*seclength, N)), ]
temp_vali <- data[((j - 1)*seclength + 1):min(j*seclength, N), ]
temp_Y <- temp_data[, 1]
temp_D <- temp_data[, 2]
temp_X <- temp_data[, -(1:2)]
temp_reglinear <- lm(temp_Y ~ ., data = data.frame(temp_Y,temp_D, temp_X))
temp_beta_est <- temp_reglinear$coefficients[-c(1:2)]
temp_firstfit <- lm(temp_D ~ ., data = data.frame(temp_D, temp_X))
temp_eta_est <- temp_firstfit$coefficients[-1]
temp_beta_est <- temp_beta_est + temp_eta_est * candidates[i]
#print(temp_beta_est)
temp_Convertmatrix <- diag(p)
for(k in 2:p){
temp_Convertmatrix[k - 1, k] <- -temp_beta_est[k - 1]/temp_beta_est[k]
}
temp_Convertmatrix_inv <- solve(temp_Convertmatrix)
temp_X_new <- as.data.frame(as.matrix(temp_X) %*% temp_Convertmatrix_inv)
temp_firstfit <- lm(temp_D ~ ., data = data.frame(temp_D, temp_X_new))
temp_res <- residuals(temp_firstfit)
#temp_D_fit <- fitted(temp_firstfit)
temp_secondfit <- lm(temp_Y ~ ., data = data.frame(temp_Y, temp_D, temp_X_new[, p]))
temp_vali_X <- temp_vali[, 3:(p + 2)]
temp_vali_X_new <- as.data.frame(as.matrix(temp_vali_X) %*% temp_Convertmatrix_inv)
temp_vali_res <- temp_vali[, 2] - predict(temp_firstfit, newdata = data.frame(temp_vali[, 2], temp_vali_X_new))
temp_X_new_combined <- cbind(1, as.matrix(temp_vali_X_new[, -p]))
temp_P_X <- temp_X_new_combined %*% solve(t(temp_X_new_combined) %*% temp_X_new_combined) %*% t(temp_X_new_combined)
temp = mean((temp_P_X %*% (temp_vali[, 1] - cbind(1, as.matrix(temp_vali[, 2]), as.matrix(temp_vali_X_new[, p])) %*% temp_secondfit$coefficients))^2)
result <- c(result, temp)
}
est_record <- c(est_record, mean(result))
var_record <- c(var_record, var(result))
}
est_record
var_record
results <- candidates[which.min(est_record)]
#results = 6
#regular linear regression
reglinear <- lm(Y ~ D + X)
reglinear$coefficients
#regular IV
firstfit <- lm(D ~ X)
res <- residuals(firstfit)
eta_est <- firstfit$coefficients[-1]
#firstfit$coefficients
#D_fit <- fitted(firstfit)
#secondfit <- lm(Y ~ D_fit + X[, 3])
#secondfit$coefficients
#our method
beta_est <- reglinear$coefficients[-c(1:2)]
beta_est <- beta_est + eta_est * results
Convertmatrix <- diag(p)
for(i in 2:p)
Convertmatrix[i - 1, i] <- -beta_est[i - 1]/beta_est[i]
Convertmatrix_inv <- solve(Convertmatrix)
Convertmatrix %*% beta_est
X_new <- X %*% Convertmatrix_inv
newreglinear <- lm(Y ~ D + X_new)
newreglinear$coefficients
#regular IV
firstfit <- lm(D ~ X_new)
D_fit <- fitted(firstfit)
res <- residuals(firstfit)
secondfit <- lm(Y ~ D + X_new[, p] + res)
secondfit$coefficients
results
#data generating
N = 20000
X_1 <- rnorm(N, 3, 1)
X_2 <- rexp(N, 1)
X_3 <- rpois(N, 1)
p = 3
X <- cbind(X_1, X_2, X_3)
eta <- c(1.5, 1.3, 1)
nu <- rnorm(N, 0, 2)
#treatment model
D <- X %*% eta + nu
alpha <- 3
beta <- c(1.5, 0.5, 0.7)
truevalue <- 10
eps <- truevalue * nu + rnorm(N, 0, 0.7)
#outcome model
Y <- D * alpha + X %*% beta + eps
#regular linear regression
reglinear <- lm(Y ~ D + X)
onlyxlinear <- lm(Y ~ X)
reglinear$coefficients
onlyxlinear$coefficients
#regular IV
firstfit <- lm(D ~ X)
res <- residuals(firstfit)
eta_est <- firstfit$coefficients[-1]
#firstfit$coefficients
D_hat <- fitted(firstfit)
#secondfit <- lm(Y ~ D_fit + X[, 3])
#secondfit$coefficients
#regular TSPS
lm(Y ~ D_hat + X)
#regular TSRI
lm(Y ~ D + res)
#our method
beta_est <- reglinear$coefficients[-c(1:2)]
beta_est <- beta_est + truevalue * eta_est
Convertmatrix <- diag(p)
for(i in 2:p)
Convertmatrix[i - 1, i] <- -beta_est[i - 1]/beta_est[i]
Convertmatrix_inv <- solve(Convertmatrix)
Convertmatrix %*% beta_est
X_new <- X %*% Convertmatrix_inv
newtsps <- lm(Y ~ D_hat + X_new[, p])
newtsps$coefficients
newtsri <- lm(Y ~ D + X_new[, p] + res)
newtsri$coefficients
#regular IV
#firstfit <- lm(D ~ X_new)
#D_fit <- fitted(firstfit)
#secondfit <- lm(Y ~ D_fit + X_new[, 3])
#secondfit$coefficients
#thirdfit <- lm(Y ~ D + res)
#thirdfit$coefficients
#thirdfit <- lm(Y ~ D_fit + res)
#thirdfit$coefficients
data <- data.frame(cbind(Y, D, X))
colnames(data) <- c("Y", "D", "X_1", "X_2", "X_3")
#K-fold cross validation
K <- 20
candidates <- -20:20
searchtime <- length(candidates)
est_record <- c()
var_record <- c()
for(i in 1:searchtime){
seclength <- ceiling(N/K)
result <- c()
for(j in 1:K){
temp_data <- data[-(((j - 1)*seclength + 1):min(j*seclength, N)), ]
temp_vali <- data[((j - 1)*seclength + 1):min(j*seclength, N), ]
temp_Y <- temp_data[, 1]
temp_D <- temp_data[, 2]
temp_X <- temp_data[, -(1:2)]
temp_reglinear <- lm(temp_Y ~ ., data = data.frame(temp_Y,temp_D, temp_X))
temp_beta_est <- temp_reglinear$coefficients[-c(1:2)]
temp_firstfit <- lm(temp_D ~ ., data = data.frame(temp_D, temp_X))
temp_eta_est <- temp_firstfit$coefficients[-1]
temp_beta_est <- temp_beta_est + temp_eta_est * candidates[i]
#print(temp_beta_est)
temp_Convertmatrix <- diag(p)
for(k in 2:p){
temp_Convertmatrix[k - 1, k] <- -temp_beta_est[k - 1]/temp_beta_est[k]
}
temp_Convertmatrix_inv <- solve(temp_Convertmatrix)
temp_X_new <- as.data.frame(as.matrix(temp_X) %*% temp_Convertmatrix_inv)
temp_firstfit <- lm(temp_D ~ ., data = data.frame(temp_D, temp_X_new))
temp_res <- residuals(temp_firstfit)
#temp_D_fit <- fitted(temp_firstfit)
temp_secondfit <- lm(temp_Y ~., data = data.frame(temp_Y, temp_D, temp_X_new[, p]))
temp_vali_X <- temp_vali[, 3:(p + 2)]
temp_vali_X_new <- as.data.frame(as.matrix(temp_vali_X) %*% temp_Convertmatrix_inv)
temp_vali_res <- temp_vali[, 2] - predict(temp_firstfit, newdata = data.frame(temp_vali[, 2], temp_vali_X_new))
temp_X_new_combined <- cbind(1, as.matrix(temp_vali_X_new[, -p]))
temp_P_X <- temp_X_new_combined %*% solve(t(temp_X_new_combined) %*% temp_X_new_combined) %*% t(temp_X_new_combined)
temp = mean((temp_P_X %*% (temp_vali[, 1] - cbind(1, as.matrix(temp_vali[, 2]), as.matrix(temp_vali_X_new[, p])) %*% temp_secondfit$coefficients))^2)
result <- c(result, temp)
}
est_record <- c(est_record, mean(result))
var_record <- c(var_record, var(result))
}
est_record
var_record
point <- candidates[which.max(est_record)]
candidates <- seq(point - 2, point + 2, by = 0.1)
searchtime <- length(candidates)
record <- c()
est_record <- c()
var_record <- c()
for(i in 1:searchtime){
seclength <- ceiling(N/K)
result <- c()
for(j in 1:K){
temp_data <- data[-(((j - 1)*seclength + 1):min(j*seclength, N)), ]
temp_vali <- data[((j - 1)*seclength + 1):min(j*seclength, N), ]
temp_Y <- temp_data[, 1]
temp_D <- temp_data[, 2]
temp_X <- temp_data[, -(1:2)]
temp_reglinear <- lm(temp_Y ~ ., data = data.frame(temp_Y,temp_D, temp_X))
temp_beta_est <- temp_reglinear$coefficients[-c(1:2)]
temp_firstfit <- lm(temp_D ~ ., data = data.frame(temp_D, temp_X))
temp_eta_est <- temp_firstfit$coefficients[-1]
temp_beta_est <- temp_beta_est + temp_eta_est * candidates[i]
#print(temp_beta_est)
temp_Convertmatrix <- diag(p)
for(k in 2:p){
temp_Convertmatrix[k - 1, k] <- -temp_beta_est[k - 1]/temp_beta_est[k]
}
temp_Convertmatrix_inv <- solve(temp_Convertmatrix)
temp_X_new <- as.data.frame(as.matrix(temp_X) %*% temp_Convertmatrix_inv)
temp_firstfit <- lm(temp_D ~ ., data = data.frame(temp_D, temp_X_new))
temp_res <- residuals(temp_firstfit)
#temp_D_fit <- fitted(temp_firstfit)
temp_secondfit <- lm(temp_Y ~ ., data = data.frame(temp_Y, temp_D, temp_X_new[, p]))
temp_vali_X <- temp_vali[, 3:(p + 2)]
temp_vali_X_new <- as.data.frame(as.matrix(temp_vali_X) %*% temp_Convertmatrix_inv)
temp_vali_res <- temp_vali[, 2] - predict(temp_firstfit, newdata = data.frame(temp_vali[, 2], temp_vali_X_new))
temp_X_new_combined <- cbind(1, as.matrix(temp_vali_X_new[, -p]))
temp_P_X <- temp_X_new_combined %*% solve(t(temp_X_new_combined) %*% temp_X_new_combined) %*% t(temp_X_new_combined)
temp = mean((temp_P_X %*% (temp_vali[, 1] - cbind(1, as.matrix(temp_vali[, 2]), as.matrix(temp_vali_X_new[, p])) %*% temp_secondfit$coefficients))^2)
result <- c(result, temp)
}
est_record <- c(est_record, mean(result))
var_record <- c(var_record, var(result))
}
est_record
var_record
results <- candidates[which.max(est_record)]
#results = 6
#regular linear regression
reglinear <- lm(Y ~ D + X)
reglinear$coefficients
#regular IV
firstfit <- lm(D ~ X)
res <- residuals(firstfit)
eta_est <- firstfit$coefficients[-1]
#firstfit$coefficients
#D_fit <- fitted(firstfit)
#secondfit <- lm(Y ~ D_fit + X[, 3])
#secondfit$coefficients
#our method
beta_est <- reglinear$coefficients[-c(1:2)]
beta_est <- beta_est + eta_est * results
Convertmatrix <- diag(p)
for(i in 2:p)
Convertmatrix[i - 1, i] <- -beta_est[i - 1]/beta_est[i]
Convertmatrix_inv <- solve(Convertmatrix)
Convertmatrix %*% beta_est
X_new <- X %*% Convertmatrix_inv
newreglinear <- lm(Y ~ D + X_new)
newreglinear$coefficients
#regular IV
firstfit <- lm(D ~ X_new)
D_fit <- fitted(firstfit)
res <- residuals(firstfit)
secondfit <- lm(Y ~ D + X_new[, p] + res)
secondfit$coefficients
results
#data generating
N = 20000
X_1 <- rnorm(N, 3, 1)
X_2 <- rexp(N, 1)
X_3 <- rpois(N, 1)
p = 3
X <- cbind(X_1, X_2, X_3)
eta <- c(1.5, 1.3, 1)
nu <- rnorm(N, 0, 2)
#treatment model
D <- X %*% eta + nu
alpha <- 3
beta <- c(1.5, 0.5, 0.7)
truevalue <- 5
eps <- truevalue * nu + rnorm(N, 0, 0.7)
#outcome model
Y <- D * alpha + X %*% beta + eps
#regular linear regression
reglinear <- lm(Y ~ D + X)
onlyxlinear <- lm(Y ~ X)
reglinear$coefficients
onlyxlinear$coefficients
#regular IV
firstfit <- lm(D ~ X)
res <- residuals(firstfit)
eta_est <- firstfit$coefficients[-1]
#firstfit$coefficients
D_hat <- fitted(firstfit)
#secondfit <- lm(Y ~ D_fit + X[, 3])
#secondfit$coefficients
#regular TSPS
lm(Y ~ D_hat + X)
#regular TSRI
lm(Y ~ D + res)
#our method
beta_est <- reglinear$coefficients[-c(1:2)]
beta_est <- beta_est + truevalue * eta_est
Convertmatrix <- diag(p)
for(i in 2:p)
Convertmatrix[i - 1, i] <- -beta_est[i - 1]/beta_est[i]
Convertmatrix_inv <- solve(Convertmatrix)
Convertmatrix %*% beta_est
X_new <- X %*% Convertmatrix_inv
newtsps <- lm(Y ~ D_hat + X_new[, p])
newtsps$coefficients
newtsri <- lm(Y ~ D + X_new[, p] + res)
newtsri$coefficients
#regular IV
#firstfit <- lm(D ~ X_new)
#D_fit <- fitted(firstfit)
#secondfit <- lm(Y ~ D_fit + X_new[, 3])
#secondfit$coefficients
#thirdfit <- lm(Y ~ D + res)
#thirdfit$coefficients
#thirdfit <- lm(Y ~ D_fit + res)
#thirdfit$coefficients
data <- data.frame(cbind(Y, D, X))
colnames(data) <- c("Y", "D", "X_1", "X_2", "X_3")
#K-fold cross validation
K <- 20
candidates <- -20:20
searchtime <- length(candidates)
est_record <- c()
var_record <- c()
for(i in 1:searchtime){
seclength <- ceiling(N/K)
result <- c()
for(j in 1:K){
temp_data <- data[-(((j - 1)*seclength + 1):min(j*seclength, N)), ]
temp_vali <- data[((j - 1)*seclength + 1):min(j*seclength, N), ]
temp_Y <- temp_data[, 1]
temp_D <- temp_data[, 2]
temp_X <- temp_data[, -(1:2)]
temp_reglinear <- lm(temp_Y ~ ., data = data.frame(temp_Y,temp_D, temp_X))
temp_beta_est <- temp_reglinear$coefficients[-c(1:2)]
temp_firstfit <- lm(temp_D ~ ., data = data.frame(temp_D, temp_X))
temp_eta_est <- temp_firstfit$coefficients[-1]
temp_beta_est <- temp_beta_est + temp_eta_est * candidates[i]
#print(temp_beta_est)
temp_Convertmatrix <- diag(p)
for(k in 2:p){
temp_Convertmatrix[k - 1, k] <- -temp_beta_est[k - 1]/temp_beta_est[k]
}
temp_Convertmatrix_inv <- solve(temp_Convertmatrix)
temp_X_new <- as.data.frame(as.matrix(temp_X) %*% temp_Convertmatrix_inv)
temp_firstfit <- lm(temp_D ~ ., data = data.frame(temp_D, temp_X_new))
temp_res <- residuals(temp_firstfit)
#temp_D_fit <- fitted(temp_firstfit)
temp_secondfit <- lm(temp_Y ~., data = data.frame(temp_Y, temp_D, temp_X_new[, p]))
temp_vali_X <- temp_vali[, 3:(p + 2)]
temp_vali_X_new <- as.data.frame(as.matrix(temp_vali_X) %*% temp_Convertmatrix_inv)
temp_vali_res <- temp_vali[, 2] - predict(temp_firstfit, newdata = data.frame(temp_vali[, 2], temp_vali_X_new))
temp_X_new_combined <- cbind(1, as.matrix(temp_vali_X_new[, -p]))
temp_P_X <- temp_X_new_combined %*% solve(t(temp_X_new_combined) %*% temp_X_new_combined) %*% t(temp_X_new_combined)
temp = mean((temp_P_X %*% (temp_vali[, 1] - cbind(1, as.matrix(temp_vali[, 2]), as.matrix(temp_vali_X_new[, p])) %*% temp_secondfit$coefficients))^2)
result <- c(result, temp)
}
est_record <- c(est_record, mean(result))
var_record <- c(var_record, var(result))
}
est_record
var_record
point <- candidates[which.max(est_record)]
candidates <- seq(point - 2, point + 2, by = 0.1)
searchtime <- length(candidates)
record <- c()
est_record <- c()
var_record <- c()
for(i in 1:searchtime){
seclength <- ceiling(N/K)
result <- c()
for(j in 1:K){
temp_data <- data[-(((j - 1)*seclength + 1):min(j*seclength, N)), ]
temp_vali <- data[((j - 1)*seclength + 1):min(j*seclength, N), ]
temp_Y <- temp_data[, 1]
temp_D <- temp_data[, 2]
temp_X <- temp_data[, -(1:2)]
temp_reglinear <- lm(temp_Y ~ ., data = data.frame(temp_Y,temp_D, temp_X))
temp_beta_est <- temp_reglinear$coefficients[-c(1:2)]
temp_firstfit <- lm(temp_D ~ ., data = data.frame(temp_D, temp_X))
temp_eta_est <- temp_firstfit$coefficients[-1]
temp_beta_est <- temp_beta_est + temp_eta_est * candidates[i]
#print(temp_beta_est)
temp_Convertmatrix <- diag(p)
for(k in 2:p){
temp_Convertmatrix[k - 1, k] <- -temp_beta_est[k - 1]/temp_beta_est[k]
}
temp_Convertmatrix_inv <- solve(temp_Convertmatrix)
temp_X_new <- as.data.frame(as.matrix(temp_X) %*% temp_Convertmatrix_inv)
temp_firstfit <- lm(temp_D ~ ., data = data.frame(temp_D, temp_X_new))
temp_res <- residuals(temp_firstfit)
#temp_D_fit <- fitted(temp_firstfit)
temp_secondfit <- lm(temp_Y ~ ., data = data.frame(temp_Y, temp_D, temp_X_new[, p]))
temp_vali_X <- temp_vali[, 3:(p + 2)]
temp_vali_X_new <- as.data.frame(as.matrix(temp_vali_X) %*% temp_Convertmatrix_inv)
temp_vali_res <- temp_vali[, 2] - predict(temp_firstfit, newdata = data.frame(temp_vali[, 2], temp_vali_X_new))
temp_X_new_combined <- cbind(1, as.matrix(temp_vali_X_new[, -p]))
temp_P_X <- temp_X_new_combined %*% solve(t(temp_X_new_combined) %*% temp_X_new_combined) %*% t(temp_X_new_combined)
temp = mean((temp_P_X %*% (temp_vali[, 1] - cbind(1, as.matrix(temp_vali[, 2]), as.matrix(temp_vali_X_new[, p])) %*% temp_secondfit$coefficients))^2)
result <- c(result, temp)
}
est_record <- c(est_record, mean(result))
var_record <- c(var_record, var(result))
}
est_record
var_record
results <- candidates[which.max(est_record)]
#results = 6
#regular linear regression
reglinear <- lm(Y ~ D + X)
reglinear$coefficients
#regular IV
firstfit <- lm(D ~ X)
res <- residuals(firstfit)
eta_est <- firstfit$coefficients[-1]
#firstfit$coefficients
#D_fit <- fitted(firstfit)
#secondfit <- lm(Y ~ D_fit + X[, 3])
#secondfit$coefficients
#our method
beta_est <- reglinear$coefficients[-c(1:2)]
beta_est <- beta_est + eta_est * results
Convertmatrix <- diag(p)
for(i in 2:p)
Convertmatrix[i - 1, i] <- -beta_est[i - 1]/beta_est[i]
Convertmatrix_inv <- solve(Convertmatrix)
Convertmatrix %*% beta_est
X_new <- X %*% Convertmatrix_inv
newreglinear <- lm(Y ~ D + X_new)
newreglinear$coefficients
#regular IV
firstfit <- lm(D ~ X_new)
D_fit <- fitted(firstfit)
res <- residuals(firstfit)
secondfit <- lm(Y ~ D + X_new[, p] + res)
secondfit$coefficients
results
rm(list = ls())
ls()
require(devtools)
library(roxygen2)
create("tsriadditive")
rm(list = ls())
ls()
library(devtools)
version
update()
rm(list = ls())
require(devtools)
require(roxygen2)
setwd("~/Dropbox/Packages/tsriadditive")
document()
document()
